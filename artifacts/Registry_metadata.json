{
	"compiler": {
		"version": "0.5.13+commit.5b0b510c"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "bool",
						"name": "test",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "string",
						"name": "identifier",
						"type": "string"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "identifierHash",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "addr",
						"type": "address"
					}
				],
				"name": "RegistryUpdated",
				"type": "event"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "identifierHash",
						"type": "bytes32"
					}
				],
				"name": "getAddressFor",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "identifierHash",
						"type": "bytes32"
					}
				],
				"name": "getAddressForOrDie",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "string",
						"name": "identifier",
						"type": "string"
					}
				],
				"name": "getAddressForString",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "string",
						"name": "identifier",
						"type": "string"
					}
				],
				"name": "getAddressForStringOrDie",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [],
				"name": "initialize",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "initialized",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "bytes32[]",
						"name": "identifierHashes",
						"type": "bytes32[]"
					},
					{
						"internalType": "address",
						"name": "sender",
						"type": "address"
					}
				],
				"name": "isOneOf",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "isOwner",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"name": "registry",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "string",
						"name": "identifier",
						"type": "string"
					},
					{
						"internalType": "address",
						"name": "addr",
						"type": "address"
					}
				],
				"name": "setAddressFor",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"methods": {
				"constructor": {
					"params": {
						"test": "Set to true to skip implementation initialization"
					}
				},
				"getAddressFor(bytes32)": {
					"params": {
						"identifierHash": "Identifier hash of contract whose address we want to look up."
					}
				},
				"getAddressForOrDie(bytes32)": {
					"details": "Throws if address not set.",
					"params": {
						"identifierHash": "Identifier hash of contract whose address we want to look up."
					}
				},
				"getAddressForString(string)": {
					"params": {
						"identifier": "Identifier of contract whose address we want to look up."
					}
				},
				"getAddressForStringOrDie(string)": {
					"details": "Throws if address not set.",
					"params": {
						"identifier": "Identifier of contract whose address we want to look up."
					}
				},
				"isOneOf(bytes32[],address)": {
					"params": {
						"identifierHashes": "Array of hashes of approved identifiers.",
						"sender": "Address in question to verify membership."
					},
					"return": "True if `sender` corresponds to the address of any of `identifiers`        registry entries."
				},
				"isOwner()": {
					"details": "Returns true if the caller is the current owner."
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
				},
				"setAddressFor(string,address)": {
					"params": {
						"addr": "Address of contract.",
						"identifier": "Identifier of contract whose address we want to set."
					}
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				}
			},
			"title": "Routes identifiers to addresses."
		},
		"userdoc": {
			"methods": {
				"constructor": "Sets initialized == true on implementation contracts",
				"getAddressFor(bytes32)": {
					"notice": "Gets address associated with the given identifierHash."
				},
				"getAddressForOrDie(bytes32)": {
					"notice": "Gets address associated with the given identifierHash."
				},
				"getAddressForString(string)": {
					"notice": "Gets address associated with the given identifier."
				},
				"getAddressForStringOrDie(string)": {
					"notice": "Gets address associated with the given identifier."
				},
				"initialize()": {
					"notice": "Used in place of the constructor to allow the contract to be upgradable via proxy."
				},
				"isOneOf(bytes32[],address)": {
					"notice": "Iterates over provided array of identifiers, getting the address for each.        Returns true if `sender` matches the address of one of the provided identifiers."
				},
				"setAddressFor(string,address)": {
					"notice": "Associates the given address with the given identifier."
				}
			}
		}
	},
	"settings": {
		"compilationTarget": {
			"Registry.sol": "Registry"
		},
		"evmVersion": "petersburg",
		"libraries": {},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"IRegistry.sol": {
			"keccak256": "0x83c12b6395bdac8526cad7e1089cfd70f31f8582333cbb4c1c94d755f9b0ffa2",
			"urls": [
				"bzz-raw://ba7781680b68887d2ab7c923e1f86a05c0091d75cd401de48a26b894f6483225",
				"dweb:/ipfs/QmQS1jzBHy67CZJCTkowRUhFgGbNaFavh9zV7KytRYiQpQ"
			]
		},
		"Initializable.sol": {
			"keccak256": "0x83419175e397c0df7bf4657451fae81bad4ef97f3ff7b5e9823bad2b19777c77",
			"urls": [
				"bzz-raw://e75bf4255c6a635b802cff1eb914e3e72d7fbf19a267eb25e6c866a30099686d",
				"dweb:/ipfs/QmWm3GQoHtbGKdA8b7eiXoR9v9KJDEcGz52tzeTmocYqPC"
			]
		},
		"Registry.sol": {
			"keccak256": "0xb01f4b171133b2c646cf96c79be083405932d42688b87d1a2c72e92737d88a93",
			"urls": [
				"bzz-raw://c9d8bd7d06629872adf64168e3c428b9a891ada8f4158bb32222902e0b41634c",
				"dweb:/ipfs/QmTVsEsz9JNfmhB4XWZYJgZ9ME5hSveeCsXqBpyB3dtGzb"
			]
		},
		"./openzeppelin-solidity/contracts/GSN/Context.sol": {
			"keccak256": "0x90a3995645af7562d84b9d69363ffa5ae7217714ab61e951bf7bc450f40e4061",
			"urls": [
				"bzz-raw://216ef9d6b614db4eb46970b4e84903f2534a45572dd30a79f0041f1a5830f436",
				"dweb:/ipfs/QmNPrJ4MWKUAWzKXpUqeyKRUfosaoANZAqXgvepdrCwZAG"
			]
		},
		"./openzeppelin-solidity/contracts/math/SafeMath.sol": {
			"keccak256": "0x640b6dee7a4b830bdfd52b5031a07fc2b12209f5b2e29e5d364a7d37f69d8076",
			"urls": [
				"bzz-raw://31113152e1ddb78fe7a4197f247591ca894e93f916867beb708d8e747b6cc74f",
				"dweb:/ipfs/QmbZaJyXdpsYGykVhHH9qpVGQg9DGCxE2QufbCUy3daTgq"
			]
		},
		"./openzeppelin-solidity/contracts/ownership/Ownable.sol": {
			"keccak256": "0x6fb9d7889769d7cc161225f9ef7a90e468ba9788b253816f8d8b6894d3472c24",
			"urls": [
				"bzz-raw://cf4c00fc3c37cc5acf0c82ec6fd97bab67d72c2567fdc0ebf023d9c09b30a08e",
				"dweb:/ipfs/Qmb7TChG6DsEDX7LooJ4vmxot19f7VXX8S1zUGPeJTWbwZ"
			]
		}
	},
	"version": 1
}