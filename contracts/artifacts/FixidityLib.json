{
	"deploy": {
		"VM:-": {
			"linkReferences": {},
			"autoDeployLib": true
		},
		"main:1": {
			"linkReferences": {},
			"autoDeployLib": true
		},
		"ropsten:3": {
			"linkReferences": {},
			"autoDeployLib": true
		},
		"rinkeby:4": {
			"linkReferences": {},
			"autoDeployLib": true
		},
		"kovan:42": {
			"linkReferences": {},
			"autoDeployLib": true
		},
		"g√∂rli:5": {
			"linkReferences": {},
			"autoDeployLib": true
		},
		"Custom": {
			"linkReferences": {},
			"autoDeployLib": true
		}
	},
	"data": {
		"bytecode": {
			"linkReferences": {},
			"object": "60556023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a723158203247a99b4af82067a9a92466f36b5a98bba2a5eae038b4aa4d9823e2e64108d464736f6c634300050d0032",
			"opcodes": "PUSH1 0x55 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 ORIGIN SELFBALANCE 0xA9 SWAP12 0x4A 0xF8 KECCAK256 PUSH8 0xA9A92466F36B5A98 0xBB LOG2 0xA5 0xEA 0xE0 CODESIZE 0xB4 0xAA 0x4D SWAP9 0x23 0xE2 0xE6 COINBASE ADDMOD 0xD4 PUSH5 0x736F6C6343 STOP SDIV 0xD STOP ORIGIN ",
			"sourceMap": "10716:10568:9:-;;132:2:-1;166:7;155:9;146:7;137:37;255:7;249:14;246:1;241:23;235:4;232:33;222:2;;269:9;222:2;293:9;290:1;283:20;323:4;314:7;306:22;347:7;338;331:24"
		},
		"deployedBytecode": {
			"linkReferences": {},
			"object": "73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a723158203247a99b4af82067a9a92466f36b5a98bba2a5eae038b4aa4d9823e2e64108d464736f6c634300050d0032",
			"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 ORIGIN SELFBALANCE 0xA9 SWAP12 0x4A 0xF8 KECCAK256 PUSH8 0xA9A92466F36B5A98 0xBB LOG2 0xA5 0xEA 0xE0 CODESIZE 0xB4 0xAA 0x4D SWAP9 0x23 0xE2 0xE6 COINBASE ADDMOD 0xD4 PUSH5 0x736F6C6343 STOP SDIV 0xD STOP ORIGIN ",
			"sourceMap": "10716:10568:9:-;;;;;;;;"
		},
		"gasEstimates": {
			"creation": {
				"codeDepositCost": "17000",
				"executionCost": "94",
				"totalCost": "17094"
			},
			"internal": {
				"add(struct FixidityLib.Fraction memory,struct FixidityLib.Fraction memory)": "infinite",
				"digits()": "infinite",
				"divide(struct FixidityLib.Fraction memory,struct FixidityLib.Fraction memory)": "infinite",
				"equals(struct FixidityLib.Fraction memory,struct FixidityLib.Fraction memory)": "infinite",
				"fixed1()": "infinite",
				"fractional(struct FixidityLib.Fraction memory)": "infinite",
				"fromFixed(struct FixidityLib.Fraction memory)": "infinite",
				"gt(struct FixidityLib.Fraction memory,struct FixidityLib.Fraction memory)": "infinite",
				"gte(struct FixidityLib.Fraction memory,struct FixidityLib.Fraction memory)": "infinite",
				"integer(struct FixidityLib.Fraction memory)": "infinite",
				"isProperFraction(struct FixidityLib.Fraction memory)": "infinite",
				"lt(struct FixidityLib.Fraction memory,struct FixidityLib.Fraction memory)": "infinite",
				"lte(struct FixidityLib.Fraction memory,struct FixidityLib.Fraction memory)": "infinite",
				"maxNewFixed()": "infinite",
				"mulPrecision()": "infinite",
				"multiply(struct FixidityLib.Fraction memory,struct FixidityLib.Fraction memory)": "infinite",
				"newFixed(uint256)": "infinite",
				"newFixedFraction(uint256,uint256)": "infinite",
				"reciprocal(struct FixidityLib.Fraction memory)": "infinite",
				"subtract(struct FixidityLib.Fraction memory,struct FixidityLib.Fraction memory)": "infinite",
				"unwrap(struct FixidityLib.Fraction memory)": "infinite",
				"wrap(uint256)": "infinite"
			}
		},
		"methodIdentifiers": {}
	},
	"abi": []
}